name: Run all tests

on: [push, pull_request]

env:
  PIP: "env PIP_DISABLE_PIP_VERSION_CHECK=1
            PYTHONWARNINGS=ignore:DEPRECATION
            pip --no-cache-dir"

jobs:
  tests_py27:
    runs-on: ubuntu-20.04
    container: python:2.7
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: $PIP install virtualenv tox

    - name: Run the unit tests
      run: TOXENV=py27 tox

    - name: Run the end-to-end tests
      run: TOXENV=py27 END_TO_END=1 tox

  tests_py34:
    runs-on: ubuntu-20.04
    container: python:3.4
    strategy:
      fail-fast: false

    env:
      # Run actions/checkout@v3
      # /__e/node20/bin/node: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.25' not found (required by /__e/node20/bin/node)
      #
      # https://github.blog/changelog/2024-03-07-github-actions-all-actions-will-run-on-node20-instead-of-node16-by-default/
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: $PIP install virtualenv tox

    - name: Run the unit tests
      run: TOXENV=py34 tox

    - name: Run the end-to-end tests
      run: TOXENV=py34 END_TO_END=1 tox

  tests_py35:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Work around pip SSL cert verify error
      run: sudo $PIP config set global.trusted-host 'pypi.python.org pypi.org files.pythonhosted.org'

    - name: Set up Python 3.5
      uses: actions/setup-python@v5
      with:
        python-version: 3.5

    - name: Install dependencies
      run: $PIP install virtualenv tox

    - name: Set variable for TOXENV based on Python version
      id: toxenv
      run: python -c 'import sys; print("TOXENV=py%d%d" % (sys.version_info.major, sys.version_info.minor))' | tee -a $GITHUB_OUTPUT

    - name: Run the unit tests
      run: TOXENV=${{steps.toxenv.outputs.TOXENV}} tox

    - name: Run the end-to-end tests
      run: TOXENV=${{steps.toxenv.outputs.TOXENV}} END_TO_END=1 tox

  tests_py3x:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, "3.10", 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: $PIP install virtualenv tox

    - name: Set variable for TOXENV based on Python version
      id: toxenv
      run: python -c 'import sys; print("TOXENV=py%d%d" % (sys.version_info.major, sys.version_info.minor))' | tee -a $GITHUB_OUTPUT

    - name: Run the unit tests
      run: TOXENV=${{steps.toxenv.outputs.TOXENV}} tox

    - name: Run the end-to-end tests
      run: TOXENV=${{steps.toxenv.outputs.TOXENV}} END_TO_END=1 tox

  coverage_py27:
    runs-on: ubuntu-20.04
    container: python:2.7
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: $PIP install virtualenv tox

    - name: Run unit test coverage
      run: TOXENV=cover tox

  coverage_py3x:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: $PIP install virtualenv tox

    - name: Run unit test coverage
      run: TOXENV=cover3 tox

  docs:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: "3.8"

    - name: Install dependencies
      run: $PIP install virtualenv tox>=4.0.0

    - name: Build the docs
      run: TOXENV=docs tox
